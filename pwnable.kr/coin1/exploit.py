from pwn import *

# details
HOST = "pwnable.kr"
PORT = 9007

context.log_level = 'debug'


def main():
    #### IMPORTANT**************************************************

    ############################### RUN ON SERVER BECAUSE INTERNET IS SHIT! (log in with an account via ssh in some previous challenge and run it there)
    ############################### to run it over the internet ANYWAY (idk why probs cuz ur dumb), change HOST to "pwnable.kr" GOOD LUCK ASSHOLE

    '''
    the process:
    **when N=800:
    int avg = 400
    int lowestIndex = 0
    int highestIndex = 800
    avg -> counterfeit coin between 0-400 ? continue with avg (avg = (lowestIndex+highestIndex) / 2), where lowestIndex = 0 and highestIndex = 400 : coin is between 400-800, so update avg, where lowestIndex = 400 and highestIndex = 800
    avg (e.g =600) -> lowestIndex = 400; highestIndex = 800; counterfeit coin between 400-600 ? avg = 500; lowestIndex = 400; highestIndex = 600;  :  counterfeit coin is between 600-800! avg = 700; lowestIndex = 600; highestIndex = 800;

    **TO SUM UP:
    int avg = numOfCoins/2
    int lowestIndex = 0
    int highestIndex = numOfCoins
    avg -> counterfeit coin between (lowestIndex-avg) ? highestIndex = avg; avg = (lowestIndex+highestIndex) / 2) : lowestIndex = avg; avg = (lowestIndex+highestIndex) / 2);

    the objective (NIHIHI haha!):
    1. read the num of coins "N={value}" and save it
    2.
    '''

    global r
    r = remote(HOST, PORT)  # connecting
    solve()


def solve():
    for X in range(0, 100):
        # print("********** STARTING:\n\n\n")
        # print("***** Receiving number of coins")
        inp = r.recvline_startswith("N=").split()
        numOfCoins = int(inp[0][2:])  # from recvline() its in the format: N={val} C={val}
        c = int(inp[1][2:])
        # print("*** numOfCoins = " + str(numOfCoins))
        avg = numOfCoins // 2
        lowestIndex = 0
        highestIndex = numOfCoins - 1

        for _ in range(c):
            scale = sendIndexes(lowestIndex, avg + 1)
            if (scale.startswith("time expired!")):  # u r an idiot
                print("time expired lol")
                print("dumbass switch to the server what r u trying to achieve here lol")
                print("the internet is shitty don't feel bad xd")
                return

            if isCounterfeitInScale(scale):
                highestIndex = avg  # Updating the highest index to fit the new scale
            else:
                lowestIndex = avg + 1  # Updating the lowest index to fit the new scale

            avg = (lowestIndex + highestIndex) // 2  # Floor divison

            """if scale == '9' or scale == '10':  # the coin has been found!!!
                print("\n\n\n\n***********FOUND COIN**********")
                print("***** coin index: " + str(lowestIndex))
                r.sendline(str(lowestIndex))

                response = r.recvline().strip('\n')
                if not response.startswith("Correct!"):
                    if response == '10':  # This may occur because of sending the wrong index (cuz we can't know it for sure from this values).
                        r.sendline(
                            str(lowestIndex + 1))  # if we entered here anyway, then the index must be lowestIndex+1 - tested by trial and error :]
                    else:
                        r.sendline(
                            str(lowestIndex))  # if we enter here, then just send it again and then the server will get it. (again - tested by trial and error lol)"""

        print("finished!")
        print("\t\t\t\t\t\t\t\t\t\t\t\t\t\tis correct index = " + str(lowestIndex))
        r.sendline(str(lowestIndex))  # send final guess
    r.interactive()


# This functions sends the indexes and returns the scale that is sent from the server
def sendIndexes(lowestIndex, highestIndex):
    indexes = getIndexesToSend(lowestIndex, highestIndex)
    r.sendline(indexes)
    # print("* Sending indexes: " + indexes + "\n")
    currScale = r.recv().strip('\n')
    # print("** Scale recieved from Server: " + currScale + "\n")
    return currScale


def getIndexesToSend(lowestIndex, highestIndex):
    indexes = ""
    for i in range(lowestIndex, highestIndex):
        indexes += str(i) + " "
    return indexes[:-1]


def isCounterfeitInScale(scale):
    return scale[-1] == '9'  # check if last digit of scale is 9 (it means the counterfeit coin is in that scale)


if __name__ == '__main__':
    main()
